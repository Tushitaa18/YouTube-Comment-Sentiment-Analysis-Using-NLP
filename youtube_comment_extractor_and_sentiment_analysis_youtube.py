# -*- coding: utf-8 -*-
"""Youtube_Comment_Extractor_and_Sentiment_Analysis_Youtube.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k688ChnGjKc2hrGgecW8853VP4kI-n5o

## Youtube Comment Extractor and Sentiment Analysis

## Extract Comments as Pandas Datafrane
"""

import googleapiclient.discovery
import pandas as pd

api_service_name = "youtube"
api_version = "v3"
DEVELOPER_KEY = ""  #Enter the API key inside the semi colon

youtube = googleapiclient.discovery.build(
    api_service_name, api_version, developerKey=DEVELOPER_KEY)

request = youtube.commentThreads().list(
    part="snippet",
    videoId="1oo1cEUlN9o",
    maxResults=400
)
response = request.execute()

comments = []

for item in response['items']:
    comment = item['snippet']['topLevelComment']['snippet']
    comments.append([
        comment['authorDisplayName'],
        comment['publishedAt'],
        comment['updatedAt'],
        comment['likeCount'],
        comment['textDisplay']
    ])

df = pd.DataFrame(comments, columns=['author', 'published_at', 'updated_at', 'like_count', 'text'])

df.head(10)

!pip install emoji
from textblob import TextBlob
import emoji

# Function to convert emojis to text descriptions
def convert_emojis(text):
    return emoji.demojize(text)

# Function to apply TextBlob and return both sentiment and subjectivity
def get_sentiment(text):
    blob = TextBlob(text)
    return pd.Series([blob.sentiment.polarity, blob.sentiment.subjectivity])

# Assuming 'df' is your DataFrame with the comments

# Convert emojis to text descriptions
df['text'] = df['text'].apply(convert_emojis)

# Apply the function to the 'text' column and create new columns for sentiment and subjectivity
df[['sentiment_polarity', 'sentiment_subjectivity']] = df['text'].apply(get_sentiment)

# Function to categorize sentiment into Positive, Negative, or Neutral
def categorize_sentiment(polarity):
    if polarity > 0:
        return 'Positive'
    elif polarity < 0:
        return 'Negative'
    else:
        return 'Neutral'

# Apply the categorization function
df['sentiment_category'] = df['sentiment_polarity'].apply(categorize_sentiment)

# Save the DataFrame to a CSV file
output_file = 'youtube_comments_sentiment_analysis.csv'
df.to_csv(output_file, index=False)

# Display a confirmation message
print(f"DataFrame has been saved to {output_file}")

from collections import Counter
import matplotlib.pyplot as plt
from wordcloud import WordCloud

# Assuming 'df' is your DataFrame with the comments

# 1. Basic Overview
print("Basic Overview of the DataFrame:")
print(df.info())
print("\n")
print("Basic Statistics:")
print(df.describe(include='all'))
print("\n")

# 2. Sentiment Distribution
sentiment_counts = df['sentiment_category'].value_counts()
print("Sentiment Distribution:")
print(sentiment_counts)

# Plotting the Sentiment Distribution
plt.figure(figsize=(8, 6))
sentiment_counts.plot(kind='bar', color=['green', 'red', 'blue'])
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Number of Comments')
plt.show()

# 3. Most Frequent Words
all_words = ' '.join(df['text'])
word_counts = Counter(all_words.split())

# Removing common stop words (you may customize this list)
stop_words = set(['and', 'the', 'to', 'a', 'is', 'it', 'in', 'of', 'that', 'on', 'for', 'this', 'with', 'as', 'was', 'are', 'but' , 'I' ,'i' , 'my' , 'you' , 'br','an'])
filtered_words = [word for word in all_words.split() if word.lower() not in stop_words]

# Word frequency
word_frequency = Counter(filtered_words)
most_common_words = word_frequency.most_common(10)
print("\nMost Common Words:")
print(most_common_words)

# Generate a Word Cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(' '.join(filtered_words))
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

# 4. Average Likes per Sentiment Category
avg_likes_per_sentiment = df.groupby('sentiment_category')['like_count'].mean()
print("\nAverage Likes per Sentiment Category:")
print(avg_likes_per_sentiment)

# Plotting the Average Likes per Sentiment Category
plt.figure(figsize=(8, 6))
avg_likes_per_sentiment.plot(kind='bar', color=['green', 'red', 'blue'])
plt.title('Average Likes per Sentiment Category')
plt.xlabel('Sentiment')
plt.ylabel('Average Likes')
plt.show()

# 5. Top Comments by Likes
top_comments = df[['author', 'text', 'like_count']].sort_values(by='like_count', ascending=False).head(5)
print("\nTop 5 Comments by Likes:")
print(top_comments)